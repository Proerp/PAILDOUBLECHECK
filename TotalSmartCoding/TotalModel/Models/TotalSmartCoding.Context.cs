//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TotalModel.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TotalSmartCodingEntities : DbContext
    {
        public TotalSmartCodingEntities()
            : base("name=TotalSmartCodingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<FillingLine> FillingLines { get; set; }
        public virtual DbSet<GoodsReceiptType> GoodsReceiptTypes { get; set; }
        public virtual DbSet<OrganizationalUnit> OrganizationalUnits { get; set; }
        public virtual DbSet<OrganizationalUnitUser> OrganizationalUnitUsers { get; set; }
        public virtual DbSet<Territory> Territories { get; set; }
        public virtual DbSet<DeliveryAdviceDetail> DeliveryAdviceDetails { get; set; }
        public virtual DbSet<Warehouse> Warehouses { get; set; }
        public virtual DbSet<Pickup> Pickups { get; set; }
        public virtual DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        public virtual DbSet<WarehouseAdjustmentType> WarehouseAdjustmentTypes { get; set; }
        public virtual DbSet<Carton> Cartons { get; set; }
        public virtual DbSet<Pack> Packs { get; set; }
        public virtual DbSet<Pallet> Pallets { get; set; }
        public virtual DbSet<PickupDetail> PickupDetails { get; set; }
        public virtual DbSet<SalesOrder> SalesOrders { get; set; }
        public virtual DbSet<DeliveryAdvice> DeliveryAdvices { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<Commodity> Commodities { get; set; }
        public virtual DbSet<BinLocation> BinLocations { get; set; }
        public virtual DbSet<ModuleDetail> ModuleDetails { get; set; }
        public virtual DbSet<GoodsIssueType> GoodsIssueTypes { get; set; }
        public virtual DbSet<TransferOrderDetail> TransferOrderDetails { get; set; }
        public virtual DbSet<CustomerCategory> CustomerCategories { get; set; }
        public virtual DbSet<CustomerType> CustomerTypes { get; set; }
        public virtual DbSet<EntireTerritory> EntireTerritories { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<GoodsIssueTransferDetail> GoodsIssueTransferDetails { get; set; }
        public virtual DbSet<GoodsReceiptDetail> GoodsReceiptDetails { get; set; }
        public virtual DbSet<GoodsReceipt> GoodsReceipts { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<GoodsIssueDetail> GoodsIssueDetails { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<TransferOrderType> TransferOrderTypes { get; set; }
        public virtual DbSet<TransferOrder> TransferOrders { get; set; }
        public virtual DbSet<WarehouseAdjustmentDetail> WarehouseAdjustmentDetails { get; set; }
        public virtual DbSet<WarehouseAdjustment> WarehouseAdjustments { get; set; }
        public virtual DbSet<CommodityCategory> CommodityCategories { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<GoodsIssue> GoodsIssues { get; set; }
        public virtual DbSet<ColumnMapping> ColumnMappings { get; set; }
        public virtual DbSet<ForecastDetail> ForecastDetails { get; set; }
        public virtual DbSet<Forecast> Forecasts { get; set; }
        public virtual DbSet<CommoditySetting> CommoditySettings { get; set; }
        public virtual DbSet<CommoditySettingDetail> CommoditySettingDetails { get; set; }
        public virtual DbSet<Batch> Batches { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<FillingLineDetail> FillingLineDetails { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<UserGroupDetail> UserGroupDetails { get; set; }
        public virtual DbSet<CommodityType> CommodityTypes { get; set; }
        public virtual DbSet<Webapi> Webapis { get; set; }
    
        public virtual ObjectResult<Nullable<int>> GetAccessLevel(Nullable<int> userID, Nullable<int> nMVNTaskID, Nullable<int> organizationalUnitID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetAccessLevel", userIDParameter, nMVNTaskIDParameter, organizationalUnitIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetApprovalPermitted(Nullable<int> userID, Nullable<int> nMVNTaskID, Nullable<int> organizationalUnitID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetApprovalPermitted", userIDParameter, nMVNTaskIDParameter, organizationalUnitIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetShowDiscount(Nullable<int> userID, Nullable<int> nMVNTaskID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetShowDiscount", userIDParameter, nMVNTaskIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetUnApprovalPermitted(Nullable<int> userID, Nullable<int> nMVNTaskID, Nullable<int> organizationalUnitID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetUnApprovalPermitted", userIDParameter, nMVNTaskIDParameter, organizationalUnitIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetUnVoidablePermitted(Nullable<int> userID, Nullable<int> nMVNTaskID, Nullable<int> organizationalUnitID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetUnVoidablePermitted", userIDParameter, nMVNTaskIDParameter, organizationalUnitIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetVoidablePermitted(Nullable<int> userID, Nullable<int> nMVNTaskID, Nullable<int> organizationalUnitID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetVoidablePermitted", userIDParameter, nMVNTaskIDParameter, organizationalUnitIDParameter);
        }
    
        public virtual ObjectResult<PendingPickupDetail> GetPendingPickupDetails(Nullable<int> locationID, Nullable<int> goodsReceiptID, Nullable<int> pickupID, Nullable<int> warehouseID, string pickupDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var goodsReceiptIDParameter = goodsReceiptID.HasValue ?
                new ObjectParameter("GoodsReceiptID", goodsReceiptID) :
                new ObjectParameter("GoodsReceiptID", typeof(int));
    
            var pickupIDParameter = pickupID.HasValue ?
                new ObjectParameter("PickupID", pickupID) :
                new ObjectParameter("PickupID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var pickupDetailIDsParameter = pickupDetailIDs != null ?
                new ObjectParameter("PickupDetailIDs", pickupDetailIDs) :
                new ObjectParameter("PickupDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingPickupDetail>("GetPendingPickupDetails", locationIDParameter, goodsReceiptIDParameter, pickupIDParameter, warehouseIDParameter, pickupDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<string> GoodsReceiptApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsReceiptApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> GoodsReceiptEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsReceiptEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> GoodsReceiptPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsReceiptPostSaveValidate", entityIDParameter);
        }
    
        public virtual int GoodsReceiptSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GoodsReceiptSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int GoodsReceiptToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GoodsReceiptToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptIndex> GetGoodsReceiptIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptIndex>("GetGoodsReceiptIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptViewDetail> GetGoodsReceiptViewDetails(Nullable<int> goodsReceiptID)
        {
            var goodsReceiptIDParameter = goodsReceiptID.HasValue ?
                new ObjectParameter("GoodsReceiptID", goodsReceiptID) :
                new ObjectParameter("GoodsReceiptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptViewDetail>("GetGoodsReceiptViewDetails", goodsReceiptIDParameter);
        }
    
        public virtual ObjectResult<PendingPickup> GetPendingPickups(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingPickup>("GetPendingPickups", locationIDParameter);
        }
    
        public virtual ObjectResult<PendingPickupWarehouse> GetPendingPickupWarehouses(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingPickupWarehouse>("GetPendingPickupWarehouses", locationIDParameter);
        }
    
        public virtual ObjectResult<string> BatchEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("BatchEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<BatchIndex> GetBatchIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> fillingLineID, Nullable<int> activeOption)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var activeOptionParameter = activeOption.HasValue ?
                new ObjectParameter("ActiveOption", activeOption) :
                new ObjectParameter("ActiveOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BatchIndex>("GetBatchIndexes", userIDParameter, fromDateParameter, toDateParameter, fillingLineIDParameter, activeOptionParameter);
        }
    
        public virtual int BatchCommonUpdate(Nullable<int> batchID, string nextPackNo, string nextCartonNo, string nextPalletNo)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var nextPackNoParameter = nextPackNo != null ?
                new ObjectParameter("NextPackNo", nextPackNo) :
                new ObjectParameter("NextPackNo", typeof(string));
    
            var nextCartonNoParameter = nextCartonNo != null ?
                new ObjectParameter("NextCartonNo", nextCartonNo) :
                new ObjectParameter("NextCartonNo", typeof(string));
    
            var nextPalletNoParameter = nextPalletNo != null ?
                new ObjectParameter("NextPalletNo", nextPalletNo) :
                new ObjectParameter("NextPalletNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BatchCommonUpdate", batchIDParameter, nextPackNoParameter, nextCartonNoParameter, nextPalletNoParameter);
        }
    
        public virtual ObjectResult<string> BatchPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("BatchPostSaveValidate", entityIDParameter);
        }
    
        public virtual ObjectResult<CommodityIndex> GetCommodityIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityIndex>("GetCommodityIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CommodityBase> GetCommodityBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityBase>("GetCommodityBases");
        }
    
        public virtual int BatchToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BatchToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual int BatchToggleVoid(Nullable<int> entityID, Nullable<bool> inActive, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BatchToggleVoid", entityIDParameter, inActiveParameter, voidTypeIDParameter);
        }
    
        public virtual ObjectResult<PickupIndex> GetPickupIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PickupIndex>("GetPickupIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<PickupViewDetail> GetPickupViewDetails(Nullable<int> pickupID)
        {
            var pickupIDParameter = pickupID.HasValue ?
                new ObjectParameter("PickupID", pickupID) :
                new ObjectParameter("PickupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PickupViewDetail>("GetPickupViewDetails", pickupIDParameter);
        }
    
        public virtual ObjectResult<string> PickupApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PickupApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> PickupEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PickupEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> PickupPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PickupPostSaveValidate", entityIDParameter);
        }
    
        public virtual int PickupSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PickupSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int PickupToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PickupToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<PendingPallet> GetPendingPallets(Nullable<int> locationID, Nullable<int> fillingLineID, Nullable<int> pickupID, string palletIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var pickupIDParameter = pickupID.HasValue ?
                new ObjectParameter("PickupID", pickupID) :
                new ObjectParameter("PickupID", typeof(int));
    
            var palletIDsParameter = palletIDs != null ?
                new ObjectParameter("PalletIDs", palletIDs) :
                new ObjectParameter("PalletIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingPallet>("GetPendingPallets", locationIDParameter, fillingLineIDParameter, pickupIDParameter, palletIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<EmployeeBase> GetEmployeeBases(Nullable<int> userID, Nullable<int> nMVNTaskID, Nullable<int> roleID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeBase>("GetEmployeeBases", userIDParameter, nMVNTaskIDParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<WarehouseBase> GetWarehouseBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseBase>("GetWarehouseBases");
        }
    
        public virtual ObjectResult<EmployeeIndex> GetEmployeeIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeIndex>("GetEmployeeIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<WarehouseIndex> GetWarehouseIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseIndex>("GetWarehouseIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<FillingLineBase> GetFillingLineBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillingLineBase>("GetFillingLineBases");
        }
    
        public virtual ObjectResult<FillingLineIndex> GetFillingLineIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillingLineIndex>("GetFillingLineIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<BinLocationBase> GetBinLocationBases(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BinLocationBase>("GetBinLocationBases", warehouseIDParameter);
        }
    
        public virtual ObjectResult<BinLocationIndex> GetBinLocationIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BinLocationIndex>("GetBinLocationIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<string> CartonEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CartonEditable", entityIDParameter);
        }
    
        public virtual int CartonSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption, string packIDs, Nullable<bool> deletePack)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            var packIDsParameter = packIDs != null ?
                new ObjectParameter("PackIDs", packIDs) :
                new ObjectParameter("PackIDs", typeof(string));
    
            var deletePackParameter = deletePack.HasValue ?
                new ObjectParameter("DeletePack", deletePack) :
                new ObjectParameter("DeletePack", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CartonSaveRelative", entityIDParameter, saveRelativeOptionParameter, packIDsParameter, deletePackParameter);
        }
    
        public virtual int CartonUpdateEntryStatus(string cartonIDs, Nullable<int> entryStatusID)
        {
            var cartonIDsParameter = cartonIDs != null ?
                new ObjectParameter("CartonIDs", cartonIDs) :
                new ObjectParameter("CartonIDs", typeof(string));
    
            var entryStatusIDParameter = entryStatusID.HasValue ?
                new ObjectParameter("EntryStatusID", entryStatusID) :
                new ObjectParameter("EntryStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CartonUpdateEntryStatus", cartonIDsParameter, entryStatusIDParameter);
        }
    
        public virtual ObjectResult<Carton> GetCartons(Nullable<int> fillingLineID, string entryStatusIDs, Nullable<int> palletID)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var entryStatusIDsParameter = entryStatusIDs != null ?
                new ObjectParameter("EntryStatusIDs", entryStatusIDs) :
                new ObjectParameter("EntryStatusIDs", typeof(string));
    
            var palletIDParameter = palletID.HasValue ?
                new ObjectParameter("PalletID", palletID) :
                new ObjectParameter("PalletID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Carton>("GetCartons", fillingLineIDParameter, entryStatusIDsParameter, palletIDParameter);
        }
    
        public virtual ObjectResult<Carton> GetCartons(Nullable<int> fillingLineID, string entryStatusIDs, Nullable<int> palletID, MergeOption mergeOption)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var entryStatusIDsParameter = entryStatusIDs != null ?
                new ObjectParameter("EntryStatusIDs", entryStatusIDs) :
                new ObjectParameter("EntryStatusIDs", typeof(string));
    
            var palletIDParameter = palletID.HasValue ?
                new ObjectParameter("PalletID", palletID) :
                new ObjectParameter("PalletID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Carton>("GetCartons", mergeOption, fillingLineIDParameter, entryStatusIDsParameter, palletIDParameter);
        }
    
        public virtual ObjectResult<Pack> GetPacks(Nullable<int> fillingLineID, string entryStatusIDs, Nullable<int> cartonID)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var entryStatusIDsParameter = entryStatusIDs != null ?
                new ObjectParameter("EntryStatusIDs", entryStatusIDs) :
                new ObjectParameter("EntryStatusIDs", typeof(string));
    
            var cartonIDParameter = cartonID.HasValue ?
                new ObjectParameter("CartonID", cartonID) :
                new ObjectParameter("CartonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pack>("GetPacks", fillingLineIDParameter, entryStatusIDsParameter, cartonIDParameter);
        }
    
        public virtual ObjectResult<Pack> GetPacks(Nullable<int> fillingLineID, string entryStatusIDs, Nullable<int> cartonID, MergeOption mergeOption)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var entryStatusIDsParameter = entryStatusIDs != null ?
                new ObjectParameter("EntryStatusIDs", entryStatusIDs) :
                new ObjectParameter("EntryStatusIDs", typeof(string));
    
            var cartonIDParameter = cartonID.HasValue ?
                new ObjectParameter("CartonID", cartonID) :
                new ObjectParameter("CartonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pack>("GetPacks", mergeOption, fillingLineIDParameter, entryStatusIDsParameter, cartonIDParameter);
        }
    
        public virtual ObjectResult<Pallet> GetPallets(Nullable<int> fillingLineID, Nullable<int> batchID, string entryStatusIDs)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var entryStatusIDsParameter = entryStatusIDs != null ?
                new ObjectParameter("EntryStatusIDs", entryStatusIDs) :
                new ObjectParameter("EntryStatusIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pallet>("GetPallets", fillingLineIDParameter, batchIDParameter, entryStatusIDsParameter);
        }
    
        public virtual ObjectResult<Pallet> GetPallets(Nullable<int> fillingLineID, Nullable<int> batchID, string entryStatusIDs, MergeOption mergeOption)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var entryStatusIDsParameter = entryStatusIDs != null ?
                new ObjectParameter("EntryStatusIDs", entryStatusIDs) :
                new ObjectParameter("EntryStatusIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pallet>("GetPallets", mergeOption, fillingLineIDParameter, batchIDParameter, entryStatusIDsParameter);
        }
    
        public virtual ObjectResult<string> PackEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PackEditable", entityIDParameter);
        }
    
        public virtual int PackUpdateEntryStatus(string packIDs, Nullable<int> entryStatusID)
        {
            var packIDsParameter = packIDs != null ?
                new ObjectParameter("PackIDs", packIDs) :
                new ObjectParameter("PackIDs", typeof(string));
    
            var entryStatusIDParameter = entryStatusID.HasValue ?
                new ObjectParameter("EntryStatusID", entryStatusID) :
                new ObjectParameter("EntryStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PackUpdateEntryStatus", packIDsParameter, entryStatusIDParameter);
        }
    
        public virtual int PackUpdateQueueID(string packIDs, Nullable<int> queueID)
        {
            var packIDsParameter = packIDs != null ?
                new ObjectParameter("PackIDs", packIDs) :
                new ObjectParameter("PackIDs", typeof(string));
    
            var queueIDParameter = queueID.HasValue ?
                new ObjectParameter("QueueID", queueID) :
                new ObjectParameter("QueueID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PackUpdateQueueID", packIDsParameter, queueIDParameter);
        }
    
        public virtual ObjectResult<string> PalletEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PalletEditable", entityIDParameter);
        }
    
        public virtual int PalletSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption, string cartonIDs)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            var cartonIDsParameter = cartonIDs != null ?
                new ObjectParameter("CartonIDs", cartonIDs) :
                new ObjectParameter("CartonIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PalletSaveRelative", entityIDParameter, saveRelativeOptionParameter, cartonIDsParameter);
        }
    
        public virtual int PalletUpdateEntryStatus(string palletIDs, Nullable<int> entryStatusID)
        {
            var palletIDsParameter = palletIDs != null ?
                new ObjectParameter("PalletIDs", palletIDs) :
                new ObjectParameter("PalletIDs", typeof(string));
    
            var entryStatusIDParameter = entryStatusID.HasValue ?
                new ObjectParameter("EntryStatusID", entryStatusID) :
                new ObjectParameter("EntryStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PalletUpdateEntryStatus", palletIDsParameter, entryStatusIDParameter);
        }
    
        public virtual ObjectResult<SalesOrderIndex> GetSalesOrderIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesOrderIndex>("GetSalesOrderIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SalesOrderViewDetail> GetSalesOrderViewDetails(Nullable<int> salesOrderID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesOrderViewDetail>("GetSalesOrderViewDetails", salesOrderIDParameter);
        }
    
        public virtual ObjectResult<string> SalesOrderApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SalesOrderApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> SalesOrderEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SalesOrderEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> SalesOrderPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SalesOrderPostSaveValidate", entityIDParameter);
        }
    
        public virtual int SalesOrderSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesOrderSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int SalesOrderToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesOrderToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<SearchCommodity> SearchCommodities(Nullable<int> commodityID, Nullable<int> locationID, Nullable<int> batchID, Nullable<int> deliveryAdviceID, Nullable<int> transferOrderID)
        {
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var deliveryAdviceIDParameter = deliveryAdviceID.HasValue ?
                new ObjectParameter("DeliveryAdviceID", deliveryAdviceID) :
                new ObjectParameter("DeliveryAdviceID", typeof(int));
    
            var transferOrderIDParameter = transferOrderID.HasValue ?
                new ObjectParameter("TransferOrderID", transferOrderID) :
                new ObjectParameter("TransferOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCommodity>("SearchCommodities", commodityIDParameter, locationIDParameter, batchIDParameter, deliveryAdviceIDParameter, transferOrderIDParameter);
        }
    
        public virtual ObjectResult<CustomerBase> GetCustomerBases(Nullable<bool> isCustomer, Nullable<bool> isReceiver)
        {
            var isCustomerParameter = isCustomer.HasValue ?
                new ObjectParameter("IsCustomer", isCustomer) :
                new ObjectParameter("IsCustomer", typeof(bool));
    
            var isReceiverParameter = isReceiver.HasValue ?
                new ObjectParameter("IsReceiver", isReceiver) :
                new ObjectParameter("IsReceiver", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerBase>("GetCustomerBases", isCustomerParameter, isReceiverParameter);
        }
    
        public virtual ObjectResult<CustomerIndex> GetCustomerIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isCustomers)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isCustomersParameter = isCustomers.HasValue ?
                new ObjectParameter("IsCustomers", isCustomers) :
                new ObjectParameter("IsCustomers", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerIndex>("GetCustomerIndexes", userIDParameter, fromDateParameter, toDateParameter, isCustomersParameter);
        }
    
        public virtual ObjectResult<string> DeliveryAdviceApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeliveryAdviceApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> DeliveryAdviceEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeliveryAdviceEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> DeliveryAdvicePostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeliveryAdvicePostSaveValidate", entityIDParameter);
        }
    
        public virtual int DeliveryAdviceSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeliveryAdviceSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int DeliveryAdviceToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeliveryAdviceToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<DeliveryAdviceIndex> GetDeliveryAdviceIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryAdviceIndex>("GetDeliveryAdviceIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<DeliveryAdviceViewDetail> GetDeliveryAdviceViewDetails(Nullable<int> deliveryAdviceID)
        {
            var deliveryAdviceIDParameter = deliveryAdviceID.HasValue ?
                new ObjectParameter("DeliveryAdviceID", deliveryAdviceID) :
                new ObjectParameter("DeliveryAdviceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryAdviceViewDetail>("GetDeliveryAdviceViewDetails", deliveryAdviceIDParameter);
        }
    
        public virtual ObjectResult<PendingSalesOrderCustomer> GetPendingSalesOrderCustomers(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingSalesOrderCustomer>("GetPendingSalesOrderCustomers", locationIDParameter);
        }
    
        public virtual ObjectResult<PendingSalesOrderDetail> GetPendingSalesOrderDetails(Nullable<int> locationID, Nullable<int> deliveryAdviceID, Nullable<int> salesOrderID, Nullable<int> customerID, Nullable<int> receiverID, string salesOrderDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var deliveryAdviceIDParameter = deliveryAdviceID.HasValue ?
                new ObjectParameter("DeliveryAdviceID", deliveryAdviceID) :
                new ObjectParameter("DeliveryAdviceID", typeof(int));
    
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var receiverIDParameter = receiverID.HasValue ?
                new ObjectParameter("ReceiverID", receiverID) :
                new ObjectParameter("ReceiverID", typeof(int));
    
            var salesOrderDetailIDsParameter = salesOrderDetailIDs != null ?
                new ObjectParameter("SalesOrderDetailIDs", salesOrderDetailIDs) :
                new ObjectParameter("SalesOrderDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingSalesOrderDetail>("GetPendingSalesOrderDetails", locationIDParameter, deliveryAdviceIDParameter, salesOrderIDParameter, customerIDParameter, receiverIDParameter, salesOrderDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<PendingSalesOrder> GetPendingSalesOrders(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingSalesOrder>("GetPendingSalesOrders", locationIDParameter);
        }
    
        public virtual ObjectResult<GoodsIssueIndex> GetGoodsIssueIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsIssueIndex>("GetGoodsIssueIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GoodsIssueViewDetail> GetGoodsIssueViewDetails(Nullable<int> goodsIssueID)
        {
            var goodsIssueIDParameter = goodsIssueID.HasValue ?
                new ObjectParameter("GoodsIssueID", goodsIssueID) :
                new ObjectParameter("GoodsIssueID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsIssueViewDetail>("GetGoodsIssueViewDetails", goodsIssueIDParameter);
        }
    
        public virtual ObjectResult<PendingDeliveryAdviceCustomer> GetPendingDeliveryAdviceCustomers(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingDeliveryAdviceCustomer>("GetPendingDeliveryAdviceCustomers", locationIDParameter);
        }
    
        public virtual ObjectResult<PendingDeliveryAdviceDetail> GetPendingDeliveryAdviceDetails(Nullable<int> locationID, Nullable<int> goodsIssueID, Nullable<int> deliveryAdviceID, Nullable<int> customerID, Nullable<int> receiverID, string deliveryAdviceDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var goodsIssueIDParameter = goodsIssueID.HasValue ?
                new ObjectParameter("GoodsIssueID", goodsIssueID) :
                new ObjectParameter("GoodsIssueID", typeof(int));
    
            var deliveryAdviceIDParameter = deliveryAdviceID.HasValue ?
                new ObjectParameter("DeliveryAdviceID", deliveryAdviceID) :
                new ObjectParameter("DeliveryAdviceID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var receiverIDParameter = receiverID.HasValue ?
                new ObjectParameter("ReceiverID", receiverID) :
                new ObjectParameter("ReceiverID", typeof(int));
    
            var deliveryAdviceDetailIDsParameter = deliveryAdviceDetailIDs != null ?
                new ObjectParameter("DeliveryAdviceDetailIDs", deliveryAdviceDetailIDs) :
                new ObjectParameter("DeliveryAdviceDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingDeliveryAdviceDetail>("GetPendingDeliveryAdviceDetails", locationIDParameter, goodsIssueIDParameter, deliveryAdviceIDParameter, customerIDParameter, receiverIDParameter, deliveryAdviceDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<PendingDeliveryAdvice> GetPendingDeliveryAdvices(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingDeliveryAdvice>("GetPendingDeliveryAdvices", locationIDParameter);
        }
    
        public virtual ObjectResult<string> GoodsIssueApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsIssueApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> GoodsIssueEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsIssueEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> GoodsIssuePostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsIssuePostSaveValidate", entityIDParameter);
        }
    
        public virtual int GoodsIssueSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GoodsIssueSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int GoodsIssueToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GoodsIssueToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptDetailAvailable> GetGoodsReceiptDetailAvailables(Nullable<int> locationID, Nullable<int> warehouseID, Nullable<int> commodityID, string commodityIDs, Nullable<int> batchID, string goodsReceiptDetailIDs, Nullable<bool> onlyApproved, Nullable<bool> onlyIssuable)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            var commodityIDsParameter = commodityIDs != null ?
                new ObjectParameter("CommodityIDs", commodityIDs) :
                new ObjectParameter("CommodityIDs", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var goodsReceiptDetailIDsParameter = goodsReceiptDetailIDs != null ?
                new ObjectParameter("GoodsReceiptDetailIDs", goodsReceiptDetailIDs) :
                new ObjectParameter("GoodsReceiptDetailIDs", typeof(string));
    
            var onlyApprovedParameter = onlyApproved.HasValue ?
                new ObjectParameter("OnlyApproved", onlyApproved) :
                new ObjectParameter("OnlyApproved", typeof(bool));
    
            var onlyIssuableParameter = onlyIssuable.HasValue ?
                new ObjectParameter("OnlyIssuable", onlyIssuable) :
                new ObjectParameter("OnlyIssuable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptDetailAvailable>("GetGoodsReceiptDetailAvailables", locationIDParameter, warehouseIDParameter, commodityIDParameter, commodityIDsParameter, batchIDParameter, goodsReceiptDetailIDsParameter, onlyApprovedParameter, onlyIssuableParameter);
        }
    
        public virtual ObjectResult<WarehouseAdjustmentIndex> GetWarehouseAdjustmentIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseAdjustmentIndex>("GetWarehouseAdjustmentIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<WarehouseAdjustmentViewDetail> GetWarehouseAdjustmentViewDetails(Nullable<int> warehouseAdjustmentID)
        {
            var warehouseAdjustmentIDParameter = warehouseAdjustmentID.HasValue ?
                new ObjectParameter("WarehouseAdjustmentID", warehouseAdjustmentID) :
                new ObjectParameter("WarehouseAdjustmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseAdjustmentViewDetail>("GetWarehouseAdjustmentViewDetails", warehouseAdjustmentIDParameter);
        }
    
        public virtual ObjectResult<string> WarehouseAdjustmentApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WarehouseAdjustmentApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> WarehouseAdjustmentEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WarehouseAdjustmentEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> WarehouseAdjustmentPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WarehouseAdjustmentPostSaveValidate", entityIDParameter);
        }
    
        public virtual int WarehouseAdjustmentSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WarehouseAdjustmentSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int WarehouseAdjustmentToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WarehouseAdjustmentToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<WarehouseAdjustmentTypeBase> GetWarehouseAdjustmentTypeBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseAdjustmentTypeBase>("GetWarehouseAdjustmentTypeBases");
        }
    
        public virtual ObjectResult<WarehouseAdjustmentTypeIndex> GetWarehouseAdjustmentTypeIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseAdjustmentTypeIndex>("GetWarehouseAdjustmentTypeIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetPalletChanged(Nullable<int> fillingLineID)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetPalletChanged", fillingLineIDParameter);
        }
    
        public virtual ObjectResult<ModuleIndex> GetModuleIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ModuleIndex>("GetModuleIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<ModuleViewDetail> GetModuleViewDetails(Nullable<int> moduleID)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ModuleViewDetail>("GetModuleViewDetails", moduleIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetVersionID(Nullable<int> configID)
        {
            var configIDParameter = configID.HasValue ?
                new ObjectParameter("ConfigID", configID) :
                new ObjectParameter("ConfigID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetVersionID", configIDParameter);
        }
    
        public virtual ObjectResult<BatchAvailable> GetBatchAvailables(Nullable<int> locationID, Nullable<int> deliveryAdviceID, Nullable<int> transferOrderID, Nullable<int> commodityID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var deliveryAdviceIDParameter = deliveryAdviceID.HasValue ?
                new ObjectParameter("DeliveryAdviceID", deliveryAdviceID) :
                new ObjectParameter("DeliveryAdviceID", typeof(int));
    
            var transferOrderIDParameter = transferOrderID.HasValue ?
                new ObjectParameter("TransferOrderID", transferOrderID) :
                new ObjectParameter("TransferOrderID", typeof(int));
    
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BatchAvailable>("GetBatchAvailables", locationIDParameter, deliveryAdviceIDParameter, transferOrderIDParameter, commodityIDParameter);
        }
    
        public virtual ObjectResult<PendingWarehouseAdjustmentDetail> GetPendingWarehouseAdjustmentDetails(Nullable<int> locationID, Nullable<int> goodsReceiptID, Nullable<int> warehouseAdjustmentID, Nullable<int> warehouseID, string warehouseAdjustmentDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var goodsReceiptIDParameter = goodsReceiptID.HasValue ?
                new ObjectParameter("GoodsReceiptID", goodsReceiptID) :
                new ObjectParameter("GoodsReceiptID", typeof(int));
    
            var warehouseAdjustmentIDParameter = warehouseAdjustmentID.HasValue ?
                new ObjectParameter("WarehouseAdjustmentID", warehouseAdjustmentID) :
                new ObjectParameter("WarehouseAdjustmentID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var warehouseAdjustmentDetailIDsParameter = warehouseAdjustmentDetailIDs != null ?
                new ObjectParameter("WarehouseAdjustmentDetailIDs", warehouseAdjustmentDetailIDs) :
                new ObjectParameter("WarehouseAdjustmentDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingWarehouseAdjustmentDetail>("GetPendingWarehouseAdjustmentDetails", locationIDParameter, goodsReceiptIDParameter, warehouseAdjustmentIDParameter, warehouseIDParameter, warehouseAdjustmentDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetGoodsReceiptIDofWarehouseAdjustment(Nullable<int> warehouseAdjustmentID)
        {
            var warehouseAdjustmentIDParameter = warehouseAdjustmentID.HasValue ?
                new ObjectParameter("WarehouseAdjustmentID", warehouseAdjustmentID) :
                new ObjectParameter("WarehouseAdjustmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetGoodsReceiptIDofWarehouseAdjustment", warehouseAdjustmentIDParameter);
        }
    
        public virtual ObjectResult<TransferOrderIndex> GetTransferOrderIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransferOrderIndex>("GetTransferOrderIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<TransferOrderViewDetail> GetTransferOrderViewDetails(Nullable<int> transferOrderID)
        {
            var transferOrderIDParameter = transferOrderID.HasValue ?
                new ObjectParameter("TransferOrderID", transferOrderID) :
                new ObjectParameter("TransferOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransferOrderViewDetail>("GetTransferOrderViewDetails", transferOrderIDParameter);
        }
    
        public virtual ObjectResult<string> TransferOrderApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TransferOrderApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> TransferOrderEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TransferOrderEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> TransferOrderPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TransferOrderPostSaveValidate", entityIDParameter);
        }
    
        public virtual int TransferOrderSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransferOrderSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int TransferOrderToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransferOrderToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<PendingTransferOrder> GetPendingTransferOrders(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingTransferOrder>("GetPendingTransferOrders", locationIDParameter);
        }
    
        public virtual ObjectResult<PendingTransferOrderWarehouse> GetPendingTransferOrderWarehouses(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingTransferOrderWarehouse>("GetPendingTransferOrderWarehouses", locationIDParameter);
        }
    
        public virtual ObjectResult<PendingTransferOrderDetail> GetPendingTransferOrderDetails(Nullable<int> locationID, Nullable<int> goodsIssueID, Nullable<int> warehouseID, Nullable<int> transferOrderID, Nullable<int> warehouseReceiptID, string transferOrderDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var goodsIssueIDParameter = goodsIssueID.HasValue ?
                new ObjectParameter("GoodsIssueID", goodsIssueID) :
                new ObjectParameter("GoodsIssueID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var transferOrderIDParameter = transferOrderID.HasValue ?
                new ObjectParameter("TransferOrderID", transferOrderID) :
                new ObjectParameter("TransferOrderID", typeof(int));
    
            var warehouseReceiptIDParameter = warehouseReceiptID.HasValue ?
                new ObjectParameter("WarehouseReceiptID", warehouseReceiptID) :
                new ObjectParameter("WarehouseReceiptID", typeof(int));
    
            var transferOrderDetailIDsParameter = transferOrderDetailIDs != null ?
                new ObjectParameter("TransferOrderDetailIDs", transferOrderDetailIDs) :
                new ObjectParameter("TransferOrderDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingTransferOrderDetail>("GetPendingTransferOrderDetails", locationIDParameter, goodsIssueIDParameter, warehouseIDParameter, transferOrderIDParameter, warehouseReceiptIDParameter, transferOrderDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<string> CustomerEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerEditable", entityIDParameter);
        }
    
        public virtual int CustomerSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<CustomerCategoryBase> GetCustomerCategoryBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerCategoryBase>("GetCustomerCategoryBases");
        }
    
        public virtual ObjectResult<CustomerCategoryIndex> GetCustomerCategoryIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerCategoryIndex>("GetCustomerCategoryIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CustomerTypeBase> GetCustomerTypeBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerTypeBase>("GetCustomerTypeBases");
        }
    
        public virtual ObjectResult<CustomerTypeIndex> GetCustomerTypeIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerTypeIndex>("GetCustomerTypeIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<TerritoryBase> GetTerritoryBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TerritoryBase>("GetTerritoryBases");
        }
    
        public virtual ObjectResult<TerritoryIndex> GetTerritoryIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TerritoryIndex>("GetTerritoryIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<PendingGoodsIssueTransferDetail> GetPendingGoodsIssueTransferDetails(Nullable<int> locationID, Nullable<int> goodsReceiptID, Nullable<int> goodsIssueID, Nullable<int> warehouseID, string goodsIssueTransferDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var goodsReceiptIDParameter = goodsReceiptID.HasValue ?
                new ObjectParameter("GoodsReceiptID", goodsReceiptID) :
                new ObjectParameter("GoodsReceiptID", typeof(int));
    
            var goodsIssueIDParameter = goodsIssueID.HasValue ?
                new ObjectParameter("GoodsIssueID", goodsIssueID) :
                new ObjectParameter("GoodsIssueID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var goodsIssueTransferDetailIDsParameter = goodsIssueTransferDetailIDs != null ?
                new ObjectParameter("GoodsIssueTransferDetailIDs", goodsIssueTransferDetailIDs) :
                new ObjectParameter("GoodsIssueTransferDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingGoodsIssueTransferDetail>("GetPendingGoodsIssueTransferDetails", locationIDParameter, goodsReceiptIDParameter, goodsIssueIDParameter, warehouseIDParameter, goodsIssueTransferDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<PendingGoodsIssueTransfer> GetPendingGoodsIssueTransfers(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingGoodsIssueTransfer>("GetPendingGoodsIssueTransfers", locationIDParameter);
        }
    
        public virtual ObjectResult<PendingGoodsIssueTransferWarehouse> GetPendingGoodsIssueTransferWarehouses(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingGoodsIssueTransferWarehouse>("GetPendingGoodsIssueTransferWarehouses", locationIDParameter);
        }
    
        public virtual ObjectResult<UserOrganizationalUnit> GetUserOrganizationalUnit(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserOrganizationalUnit>("GetUserOrganizationalUnit", userNameParameter);
        }
    
        public virtual ObjectResult<ModuleDetailIndex> GetModuleDetailIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ModuleDetailIndex>("GetModuleDetailIndexes");
        }
    
        public virtual ObjectResult<UserIndex> GetUserIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> activeOption)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var activeOptionParameter = activeOption.HasValue ?
                new ObjectParameter("ActiveOption", activeOption) :
                new ObjectParameter("ActiveOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserIndex>("GetUserIndexes", userIDParameter, fromDateParameter, toDateParameter, activeOptionParameter);
        }
    
        public virtual ObjectResult<UserAccessControl> GetUserAccessControls(Nullable<int> userID, Nullable<int> nMVNTaskID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserAccessControl>("GetUserAccessControls", userIDParameter, nMVNTaskIDParameter);
        }
    
        public virtual int SaveUserAccessControls(Nullable<int> accessControlID, Nullable<int> accessLevel, Nullable<bool> approvalPermitted, Nullable<bool> unApprovalPermitted, Nullable<bool> voidablePermitted, Nullable<bool> unVoidablePermitted, Nullable<bool> showDiscount)
        {
            var accessControlIDParameter = accessControlID.HasValue ?
                new ObjectParameter("AccessControlID", accessControlID) :
                new ObjectParameter("AccessControlID", typeof(int));
    
            var accessLevelParameter = accessLevel.HasValue ?
                new ObjectParameter("AccessLevel", accessLevel) :
                new ObjectParameter("AccessLevel", typeof(int));
    
            var approvalPermittedParameter = approvalPermitted.HasValue ?
                new ObjectParameter("ApprovalPermitted", approvalPermitted) :
                new ObjectParameter("ApprovalPermitted", typeof(bool));
    
            var unApprovalPermittedParameter = unApprovalPermitted.HasValue ?
                new ObjectParameter("UnApprovalPermitted", unApprovalPermitted) :
                new ObjectParameter("UnApprovalPermitted", typeof(bool));
    
            var voidablePermittedParameter = voidablePermitted.HasValue ?
                new ObjectParameter("VoidablePermitted", voidablePermitted) :
                new ObjectParameter("VoidablePermitted", typeof(bool));
    
            var unVoidablePermittedParameter = unVoidablePermitted.HasValue ?
                new ObjectParameter("UnVoidablePermitted", unVoidablePermitted) :
                new ObjectParameter("UnVoidablePermitted", typeof(bool));
    
            var showDiscountParameter = showDiscount.HasValue ?
                new ObjectParameter("ShowDiscount", showDiscount) :
                new ObjectParameter("ShowDiscount", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveUserAccessControls", accessControlIDParameter, accessLevelParameter, approvalPermittedParameter, unApprovalPermittedParameter, voidablePermittedParameter, unVoidablePermittedParameter, showDiscountParameter);
        }
    
        public virtual ObjectResult<OrganizationalUnitIndex> GetOrganizationalUnitIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrganizationalUnitIndex>("GetOrganizationalUnitIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetWarehouseLocationID(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetWarehouseLocationID", warehouseIDParameter);
        }
    
        public virtual ObjectResult<TransferOrderTypeBase> GetTransferOrderTypeBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransferOrderTypeBase>("GetTransferOrderTypeBases");
        }
    
        public virtual ObjectResult<TransferOrderTypeIndex> GetTransferOrderTypeIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransferOrderTypeIndex>("GetTransferOrderTypeIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<ActiveUser> GetActiveUsers(string securityIdentifier)
        {
            var securityIdentifierParameter = securityIdentifier != null ?
                new ObjectParameter("SecurityIdentifier", securityIdentifier) :
                new ObjectParameter("SecurityIdentifier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActiveUser>("GetActiveUsers", securityIdentifierParameter);
        }
    
        public virtual ObjectResult<Carton> SearchCartons(string barcode)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Carton>("SearchCartons", barcodeParameter);
        }
    
        public virtual ObjectResult<Carton> SearchCartons(string barcode, MergeOption mergeOption)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Carton>("SearchCartons", mergeOption, barcodeParameter);
        }
    
        public virtual ObjectResult<Pack> SearchPacks(string barcode)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pack>("SearchPacks", barcodeParameter);
        }
    
        public virtual ObjectResult<Pack> SearchPacks(string barcode, MergeOption mergeOption)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pack>("SearchPacks", mergeOption, barcodeParameter);
        }
    
        public virtual ObjectResult<Pallet> SearchPallets(string barcode)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pallet>("SearchPallets", barcodeParameter);
        }
    
        public virtual ObjectResult<Pallet> SearchPallets(string barcode, MergeOption mergeOption)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pallet>("SearchPallets", mergeOption, barcodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetStoredID(Nullable<int> configID)
        {
            var configIDParameter = configID.HasValue ?
                new ObjectParameter("ConfigID", configID) :
                new ObjectParameter("ConfigID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetStoredID", configIDParameter);
        }
    
        public virtual int SalesOrderToggleVoid(Nullable<int> entityID, Nullable<bool> inActive, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesOrderToggleVoid", entityIDParameter, inActiveParameter, voidTypeIDParameter);
        }
    
        public virtual ObjectResult<string> SalesOrderVoidable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SalesOrderVoidable", entityIDParameter);
        }
    
        public virtual int DeliveryAdviceToggleVoid(Nullable<int> entityID, Nullable<bool> inActive, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeliveryAdviceToggleVoid", entityIDParameter, inActiveParameter, voidTypeIDParameter);
        }
    
        public virtual ObjectResult<string> DeliveryAdviceVoidable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeliveryAdviceVoidable", entityIDParameter);
        }
    
        public virtual int TransferOrderToggleVoid(Nullable<int> entityID, Nullable<bool> inActive, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransferOrderToggleVoid", entityIDParameter, inActiveParameter, voidTypeIDParameter);
        }
    
        public virtual ObjectResult<string> TransferOrderVoidable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TransferOrderVoidable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> BinLocationEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("BinLocationEditable", entityIDParameter);
        }
    
        public virtual int BinLocationSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BinLocationSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<string> BinLocationPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("BinLocationPostSaveValidate", entityIDParameter);
        }
    
        public virtual ObjectResult<LocationBase> GetLocationBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LocationBase>("GetLocationBases");
        }
    
        public virtual ObjectResult<LocationIndex> GetLocationIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LocationIndex>("GetLocationIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<string> CommodityEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CommodityEditable", entityIDParameter);
        }
    
        public virtual int CommoditySaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CommoditySaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<CommodityCategoryBase> GetCommodityCategoryBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityCategoryBase>("GetCommodityCategoryBases");
        }
    
        public virtual ObjectResult<CommodityCategoryIndex> GetCommodityCategoryIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityCategoryIndex>("GetCommodityCategoryIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CommodityTree> GetCommodityTrees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityTree>("GetCommodityTrees");
        }
    
        public virtual ObjectResult<WarehouseTree> GetWarehouseTrees(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseTree>("GetWarehouseTrees", locationIDParameter);
        }
    
        public virtual ObjectResult<CommodityTypeTree> GetCommodityTypeTrees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityTypeTree>("GetCommodityTypeTrees");
        }
    
        public virtual ObjectResult<CustomerTree> GetCustomerTrees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerTree>("GetCustomerTrees");
        }
    
        public virtual ObjectResult<EmployeeTree> GetEmployeeTrees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeTree>("GetEmployeeTrees");
        }
    
        public virtual ObjectResult<WarehouseAdjustmentTypeTree> GetWarehouseAdjustmentTypeTrees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseAdjustmentTypeTree>("GetWarehouseAdjustmentTypeTrees");
        }
    
        public virtual ObjectResult<CommodityTypeBase> GetCommodityTypeBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityTypeBase>("GetCommodityTypeBases");
        }
    
        public virtual ObjectResult<CommodityTypeIndex> GetCommodityTypeIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityTypeIndex>("GetCommodityTypeIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<ReportIndex> GetReportIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportIndex>("GetReportIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<UserTree> GetUserTrees(Nullable<int> activeOption)
        {
            var activeOptionParameter = activeOption.HasValue ?
                new ObjectParameter("ActiveOption", activeOption) :
                new ObjectParameter("ActiveOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserTree>("GetUserTrees", activeOptionParameter);
        }
    
        public virtual int UserRegister(Nullable<int> locationID, Nullable<int> organizationalUnitID, string firstName, string lastName, string userName, string securityIdentifier, Nullable<int> sameOUAccessLevel, Nullable<int> sameLocationAccessLevel, Nullable<int> otherOUAccessLevel)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var securityIdentifierParameter = securityIdentifier != null ?
                new ObjectParameter("SecurityIdentifier", securityIdentifier) :
                new ObjectParameter("SecurityIdentifier", typeof(string));
    
            var sameOUAccessLevelParameter = sameOUAccessLevel.HasValue ?
                new ObjectParameter("SameOUAccessLevel", sameOUAccessLevel) :
                new ObjectParameter("SameOUAccessLevel", typeof(int));
    
            var sameLocationAccessLevelParameter = sameLocationAccessLevel.HasValue ?
                new ObjectParameter("SameLocationAccessLevel", sameLocationAccessLevel) :
                new ObjectParameter("SameLocationAccessLevel", typeof(int));
    
            var otherOUAccessLevelParameter = otherOUAccessLevel.HasValue ?
                new ObjectParameter("OtherOUAccessLevel", otherOUAccessLevel) :
                new ObjectParameter("OtherOUAccessLevel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserRegister", locationIDParameter, organizationalUnitIDParameter, firstNameParameter, lastNameParameter, userNameParameter, securityIdentifierParameter, sameOUAccessLevelParameter, sameLocationAccessLevelParameter, otherOUAccessLevelParameter);
        }
    
        public virtual int UserUnregister(Nullable<int> userID, string userName, string organizationalUnitName)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var organizationalUnitNameParameter = organizationalUnitName != null ?
                new ObjectParameter("OrganizationalUnitName", organizationalUnitName) :
                new ObjectParameter("OrganizationalUnitName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserUnregister", userIDParameter, userNameParameter, organizationalUnitNameParameter);
        }
    
        public virtual int UserToggleVoid(Nullable<int> entityID, Nullable<bool> inActive)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserToggleVoid", entityIDParameter, inActiveParameter);
        }
    
        public virtual ObjectResult<string> UserEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UserEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> OrganizationalUnitEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("OrganizationalUnitEditable", entityIDParameter);
        }
    
        public virtual int OrganizationalUnitAdd(Nullable<int> locationID, string code, string name)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrganizationalUnitAdd", locationIDParameter, codeParameter, nameParameter);
        }
    
        public virtual int OrganizationalUnitRemove(Nullable<int> organizationalUnitID, string code)
        {
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrganizationalUnitRemove", organizationalUnitIDParameter, codeParameter);
        }
    
        public virtual ObjectResult<ColumnMapping> GetColumnMappings(Nullable<int> mappingTaskID)
        {
            var mappingTaskIDParameter = mappingTaskID.HasValue ?
                new ObjectParameter("MappingTaskID", mappingTaskID) :
                new ObjectParameter("MappingTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ColumnMapping>("GetColumnMappings", mappingTaskIDParameter);
        }
    
        public virtual ObjectResult<ColumnMapping> GetColumnMappings(Nullable<int> mappingTaskID, MergeOption mergeOption)
        {
            var mappingTaskIDParameter = mappingTaskID.HasValue ?
                new ObjectParameter("MappingTaskID", mappingTaskID) :
                new ObjectParameter("MappingTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ColumnMapping>("GetColumnMappings", mergeOption, mappingTaskIDParameter);
        }
    
        public virtual int SaveColumnMapping(Nullable<int> columnMappingID, string columnMappingName)
        {
            var columnMappingIDParameter = columnMappingID.HasValue ?
                new ObjectParameter("ColumnMappingID", columnMappingID) :
                new ObjectParameter("ColumnMappingID", typeof(int));
    
            var columnMappingNameParameter = columnMappingName != null ?
                new ObjectParameter("ColumnMappingName", columnMappingName) :
                new ObjectParameter("ColumnMappingName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveColumnMapping", columnMappingIDParameter, columnMappingNameParameter);
        }
    
        public virtual ObjectResult<string> ForecastEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ForecastEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> ForecastPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ForecastPostSaveValidate", entityIDParameter);
        }
    
        public virtual int ForecastSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ForecastSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<ForecastIndex> GetForecastIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ForecastIndex>("GetForecastIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<ForecastViewDetail> GetForecastViewDetails(Nullable<int> forecastID)
        {
            var forecastIDParameter = forecastID.HasValue ?
                new ObjectParameter("ForecastID", forecastID) :
                new ObjectParameter("ForecastID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ForecastViewDetail>("GetForecastViewDetails", forecastIDParameter);
        }
    
        public virtual ObjectResult<CommodityBase> GetCommodityBase(Nullable<int> commodityID)
        {
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityBase>("GetCommodityBase", commodityIDParameter);
        }
    
        public virtual ObjectResult<CommodityBase> GetCommodityBaseByCode(string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityBase>("GetCommodityBaseByCode", codeParameter);
        }
    
        public virtual ObjectResult<WarehouseBase> GetWarehouseBase(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseBase>("GetWarehouseBase", warehouseIDParameter);
        }
    
        public virtual ObjectResult<WarehouseBase> GetWarehouseBaseByCode(string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseBase>("GetWarehouseBaseByCode", codeParameter);
        }
    
        public virtual ObjectResult<string> CommoditySettingEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CommoditySettingEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<CommoditySettingIndex> GetCommoditySettingIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommoditySettingIndex>("GetCommoditySettingIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<WholePendingDeliveryAdviceDetail> GetWholePendingDeliveryAdviceDetails(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WholePendingDeliveryAdviceDetail>("GetWholePendingDeliveryAdviceDetails", locationIDParameter);
        }
    
        public virtual ObjectResult<WholePendingSalesOrderDetail> GetWholePendingSalesOrderDetails(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WholePendingSalesOrderDetail>("GetWholePendingSalesOrderDetails", locationIDParameter);
        }
    
        public virtual ObjectResult<WholePendingTransferOrderDetail> GetWholePendingTransferOrderDetails(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WholePendingTransferOrderDetail>("GetWholePendingTransferOrderDetails", locationIDParameter);
        }
    
        public virtual ObjectResult<string> EmployeeEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("EmployeeEditable", entityIDParameter);
        }
    
        public virtual int EmployeeSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<TeamBase> GetTeamBases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TeamBase>("GetTeamBases");
        }
    
        public virtual ObjectResult<TeamIndex> GetTeamIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TeamIndex>("GetTeamIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<TeamTree> GetTeamTrees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TeamTree>("GetTeamTrees");
        }
    
        public virtual ObjectResult<string> EmployeeDeletable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("EmployeeDeletable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> FillingLineDeletable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FillingLineDeletable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> FillingLineEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FillingLineEditable", entityIDParameter);
        }
    
        public virtual int FillingLineSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FillingLineSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<FillingLineSetting> GetFillingLineSettings(Nullable<int> fillingLineID, Nullable<int> deviceID)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var deviceIDParameter = deviceID.HasValue ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillingLineSetting>("GetFillingLineSettings", fillingLineIDParameter, deviceIDParameter);
        }
    
        public virtual ObjectResult<UserGroupIndex> GetUserGroupIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserGroupIndex>("GetUserGroupIndexes", userIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UserGroupAdd(string code, string name, string description)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UserGroupAdd", codeParameter, nameParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<string> UserGroupEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UserGroupEditable", entityIDParameter);
        }
    
        public virtual int UserGroupRemove(Nullable<int> userGroupID, string code)
        {
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserGroupRemove", userGroupIDParameter, codeParameter);
        }
    
        public virtual ObjectResult<UserGroupControl> GetUserGroupControls(Nullable<int> userGroupID)
        {
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserGroupControl>("GetUserGroupControls", userGroupIDParameter);
        }
    
        public virtual int SaveUserGroupControls(Nullable<int> userGroupControlID, Nullable<int> accessLevel, Nullable<bool> approvalPermitted, Nullable<bool> unApprovalPermitted, Nullable<bool> voidablePermitted, Nullable<bool> unVoidablePermitted, Nullable<bool> showDiscount)
        {
            var userGroupControlIDParameter = userGroupControlID.HasValue ?
                new ObjectParameter("UserGroupControlID", userGroupControlID) :
                new ObjectParameter("UserGroupControlID", typeof(int));
    
            var accessLevelParameter = accessLevel.HasValue ?
                new ObjectParameter("AccessLevel", accessLevel) :
                new ObjectParameter("AccessLevel", typeof(int));
    
            var approvalPermittedParameter = approvalPermitted.HasValue ?
                new ObjectParameter("ApprovalPermitted", approvalPermitted) :
                new ObjectParameter("ApprovalPermitted", typeof(bool));
    
            var unApprovalPermittedParameter = unApprovalPermitted.HasValue ?
                new ObjectParameter("UnApprovalPermitted", unApprovalPermitted) :
                new ObjectParameter("UnApprovalPermitted", typeof(bool));
    
            var voidablePermittedParameter = voidablePermitted.HasValue ?
                new ObjectParameter("VoidablePermitted", voidablePermitted) :
                new ObjectParameter("VoidablePermitted", typeof(bool));
    
            var unVoidablePermittedParameter = unVoidablePermitted.HasValue ?
                new ObjectParameter("UnVoidablePermitted", unVoidablePermitted) :
                new ObjectParameter("UnVoidablePermitted", typeof(bool));
    
            var showDiscountParameter = showDiscount.HasValue ?
                new ObjectParameter("ShowDiscount", showDiscount) :
                new ObjectParameter("ShowDiscount", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveUserGroupControls", userGroupControlIDParameter, accessLevelParameter, approvalPermittedParameter, unApprovalPermittedParameter, voidablePermittedParameter, unVoidablePermittedParameter, showDiscountParameter);
        }
    
        public virtual ObjectResult<UserGroupAvailableMember> GetUserGroupAvailableMembers(Nullable<int> userGroupID)
        {
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserGroupAvailableMember>("GetUserGroupAvailableMembers", userGroupIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UserGroupAddMember(Nullable<int> userGroupID, string securityIdentifier)
        {
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            var securityIdentifierParameter = securityIdentifier != null ?
                new ObjectParameter("SecurityIdentifier", securityIdentifier) :
                new ObjectParameter("SecurityIdentifier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UserGroupAddMember", userGroupIDParameter, securityIdentifierParameter);
        }
    
        public virtual int UserGroupRemoveMember(Nullable<int> userGroupDetailID)
        {
            var userGroupDetailIDParameter = userGroupDetailID.HasValue ?
                new ObjectParameter("UserGroupDetailID", userGroupDetailID) :
                new ObjectParameter("UserGroupDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserGroupRemoveMember", userGroupDetailIDParameter);
        }
    
        public virtual ObjectResult<UserGroupMember> GetUserGroupMembers(Nullable<int> userGroupID)
        {
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserGroupMember>("GetUserGroupMembers", userGroupIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> GetLockedDate(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("GetLockedDate", locationIDParameter);
        }
    
        public virtual int UpdateLockedDate(Nullable<int> userID, Nullable<int> locationID, Nullable<System.DateTime> lockedDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var lockedDateParameter = lockedDate.HasValue ?
                new ObjectParameter("LockedDate", lockedDate) :
                new ObjectParameter("LockedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLockedDate", userIDParameter, locationIDParameter, lockedDateParameter);
        }
    
        public virtual ObjectResult<ApplicationRole> GetApplicationRoles(Nullable<int> applicationRoleID)
        {
            var applicationRoleIDParameter = applicationRoleID.HasValue ?
                new ObjectParameter("ApplicationRoleID", applicationRoleID) :
                new ObjectParameter("ApplicationRoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ApplicationRole>("GetApplicationRoles", applicationRoleIDParameter);
        }
    
        public virtual int UpdateApplicationRole(Nullable<int> applicationRoleID, string name, string password)
        {
            var applicationRoleIDParameter = applicationRoleID.HasValue ?
                new ObjectParameter("ApplicationRoleID", applicationRoleID) :
                new ObjectParameter("ApplicationRoleID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateApplicationRole", applicationRoleIDParameter, nameParameter, passwordParameter);
        }
    
        public virtual int AddDataLogs(Nullable<int> locationID, Nullable<int> entryID, Nullable<int> entryDetailID, Nullable<System.DateTime> entryDate, string moduleName, string userName, string iPAddress, string actionType, string entityName, string propertyName, string propertyValue)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var entryDetailIDParameter = entryDetailID.HasValue ?
                new ObjectParameter("EntryDetailID", entryDetailID) :
                new ObjectParameter("EntryDetailID", typeof(int));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var actionTypeParameter = actionType != null ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(string));
    
            var entityNameParameter = entityName != null ?
                new ObjectParameter("EntityName", entityName) :
                new ObjectParameter("EntityName", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var propertyValueParameter = propertyValue != null ?
                new ObjectParameter("PropertyValue", propertyValue) :
                new ObjectParameter("PropertyValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDataLogs", locationIDParameter, entryIDParameter, entryDetailIDParameter, entryDateParameter, moduleNameParameter, userNameParameter, iPAddressParameter, actionTypeParameter, entityNameParameter, propertyNameParameter, propertyValueParameter);
        }
    
        public virtual int AddEventLogs(Nullable<int> locationID, Nullable<System.DateTime> entryDate, string userName, string iPAddress, string moduleName, string actionType, Nullable<int> entryID, string remarks)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            var actionTypeParameter = actionType != null ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(string));
    
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEventLogs", locationIDParameter, entryDateParameter, userNameParameter, iPAddressParameter, moduleNameParameter, actionTypeParameter, entryIDParameter, remarksParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetOnDataLogs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetOnDataLogs");
        }
    
        public virtual int UpdateOnDataLogs(Nullable<int> onDataLogs)
        {
            var onDataLogsParameter = onDataLogs.HasValue ?
                new ObjectParameter("OnDataLogs", onDataLogs) :
                new ObjectParameter("OnDataLogs", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOnDataLogs", onDataLogsParameter);
        }
    
        public virtual ObjectResult<UserControlIndex> GetUserControlIndexes(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> activeOption)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var activeOptionParameter = activeOption.HasValue ?
                new ObjectParameter("ActiveOption", activeOption) :
                new ObjectParameter("ActiveOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserControlIndex>("GetUserControlIndexes", userIDParameter, fromDateParameter, toDateParameter, activeOptionParameter);
        }
    
        public virtual ObjectResult<UserControlGroup> GetUserControlGroups(string securityIdentifier)
        {
            var securityIdentifierParameter = securityIdentifier != null ?
                new ObjectParameter("SecurityIdentifier", securityIdentifier) :
                new ObjectParameter("SecurityIdentifier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserControlGroup>("GetUserControlGroups", securityIdentifierParameter);
        }
    
        public virtual ObjectResult<UserControlAvailableGroup> GetUserControlAvailableGroups(string securityIdentifier)
        {
            var securityIdentifierParameter = securityIdentifier != null ?
                new ObjectParameter("SecurityIdentifier", securityIdentifier) :
                new ObjectParameter("SecurityIdentifier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserControlAvailableGroup>("GetUserControlAvailableGroups", securityIdentifierParameter);
        }
    
        public virtual int UserControlRegister(string firstName, string lastName, string userName, string securityIdentifier)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var securityIdentifierParameter = securityIdentifier != null ?
                new ObjectParameter("SecurityIdentifier", securityIdentifier) :
                new ObjectParameter("SecurityIdentifier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserControlRegister", firstNameParameter, lastNameParameter, userNameParameter, securityIdentifierParameter);
        }
    
        public virtual ObjectResult<string> UserControlEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UserControlEditable", entityIDParameter);
        }
    
        public virtual int UserControlUnregister(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserControlUnregister", userIDParameter);
        }
    
        public virtual int UserControlToggleVoid(Nullable<int> entityID, Nullable<bool> inActive)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserControlToggleVoid", entityIDParameter, inActiveParameter);
        }
    
        public virtual ObjectResult<UserGroupReport> GetUserGroupReports(Nullable<int> userGroupID)
        {
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserGroupReport>("GetUserGroupReports", userGroupIDParameter);
        }
    
        public virtual int SaveUserGroupReports(Nullable<int> userGroupReportID, Nullable<bool> enabled)
        {
            var userGroupReportIDParameter = userGroupReportID.HasValue ?
                new ObjectParameter("UserGroupReportID", userGroupReportID) :
                new ObjectParameter("UserGroupReportID", typeof(int));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveUserGroupReports", userGroupReportIDParameter, enabledParameter);
        }
    
        public virtual ObjectResult<UserControlAvailableSalesperson> GetUserControlAvailableSalespersons(string securityIdentifier)
        {
            var securityIdentifierParameter = securityIdentifier != null ?
                new ObjectParameter("SecurityIdentifier", securityIdentifier) :
                new ObjectParameter("SecurityIdentifier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserControlAvailableSalesperson>("GetUserControlAvailableSalespersons", securityIdentifierParameter);
        }
    
        public virtual ObjectResult<UserControlSalesperson> GetUserControlSalespersons(string securityIdentifier)
        {
            var securityIdentifierParameter = securityIdentifier != null ?
                new ObjectParameter("SecurityIdentifier", securityIdentifier) :
                new ObjectParameter("SecurityIdentifier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserControlSalesperson>("GetUserControlSalespersons", securityIdentifierParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UserControlAddSalesperson(string securityIdentifier, Nullable<int> employeeID)
        {
            var securityIdentifierParameter = securityIdentifier != null ?
                new ObjectParameter("SecurityIdentifier", securityIdentifier) :
                new ObjectParameter("SecurityIdentifier", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UserControlAddSalesperson", securityIdentifierParameter, employeeIDParameter);
        }
    
        public virtual int UserControlRemoveSalesperson(Nullable<int> userSalespersonID)
        {
            var userSalespersonIDParameter = userSalespersonID.HasValue ?
                new ObjectParameter("UserSalespersonID", userSalespersonID) :
                new ObjectParameter("UserSalespersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserControlRemoveSalesperson", userSalespersonIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetOnEventLogs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetOnEventLogs");
        }
    
        public virtual int UpdateOnEventLogs(Nullable<int> onEventLogs)
        {
            var onEventLogsParameter = onEventLogs.HasValue ?
                new ObjectParameter("OnEventLogs", onEventLogs) :
                new ObjectParameter("OnEventLogs", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOnEventLogs", onEventLogsParameter);
        }
    
        public virtual ObjectResult<string> BinLocationDeletable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("BinLocationDeletable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> CommodityDeletable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CommodityDeletable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> CommoditySettingDeletable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CommoditySettingDeletable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> CustomerDeletable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerDeletable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> TeamDeletable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TeamDeletable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> TeamEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TeamEditable", entityIDParameter);
        }
    
        public virtual int TeamSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TeamSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<string> CommodityCategoryDeletable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CommodityCategoryDeletable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> CommodityCategoryEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CommodityCategoryEditable", entityIDParameter);
        }
    
        public virtual int CommodityCategorySaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CommodityCategorySaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<string> CommodityTypeDeletable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CommodityTypeDeletable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> CommodityTypeEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CommodityTypeEditable", entityIDParameter);
        }
    
        public virtual int CommodityTypeSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CommodityTypeSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<string> CustomerCategoryDeletable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerCategoryDeletable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> CustomerCategoryEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerCategoryEditable", entityIDParameter);
        }
    
        public virtual int CustomerCategorySaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerCategorySaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<string> CustomerTypeEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerTypeEditable", entityIDParameter);
        }
    
        public virtual int CustomerTypeSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerTypeSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<string> TerritoryDeletable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TerritoryDeletable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> TerritoryEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TerritoryEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> TerritoryPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TerritoryPostSaveValidate", entityIDParameter);
        }
    
        public virtual int TerritorySaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TerritorySaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<string> CustomerTypeDeletable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerTypeDeletable", entityIDParameter);
        }
    
        public virtual int UserControlSetAdmin(Nullable<int> entityID, Nullable<bool> isDatabaseAdmin)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var isDatabaseAdminParameter = isDatabaseAdmin.HasValue ?
                new ObjectParameter("IsDatabaseAdmin", isDatabaseAdmin) :
                new ObjectParameter("IsDatabaseAdmin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserControlSetAdmin", entityIDParameter, isDatabaseAdminParameter);
        }
    
        public virtual ObjectResult<string> WarehouseDeletable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WarehouseDeletable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> WarehouseEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WarehouseEditable", entityIDParameter);
        }
    
        public virtual int WarehouseSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WarehouseSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UserGroupRename(Nullable<int> userGroupID, string code, string name, string description)
        {
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UserGroupRename", userGroupIDParameter, codeParameter, nameParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<string> GetLegalNotice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetLegalNotice");
        }
    
        public virtual int UpdateLegalNotice(string legalNotice)
        {
            var legalNoticeParameter = legalNotice != null ?
                new ObjectParameter("LegalNotice", legalNotice) :
                new ObjectParameter("LegalNotice", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLegalNotice", legalNoticeParameter);
        }
    
        public virtual int BatchExtendedUpdate(Nullable<int> batchID, string batchPackNo, string batchCartonNo, string batchPalletNo)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchPackNoParameter = batchPackNo != null ?
                new ObjectParameter("BatchPackNo", batchPackNo) :
                new ObjectParameter("BatchPackNo", typeof(string));
    
            var batchCartonNoParameter = batchCartonNo != null ?
                new ObjectParameter("BatchCartonNo", batchCartonNo) :
                new ObjectParameter("BatchCartonNo", typeof(string));
    
            var batchPalletNoParameter = batchPalletNo != null ?
                new ObjectParameter("BatchPalletNo", batchPalletNo) :
                new ObjectParameter("BatchPalletNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BatchExtendedUpdate", batchIDParameter, batchPackNoParameter, batchCartonNoParameter, batchPalletNoParameter);
        }
    
        public virtual ObjectResult<BatchMaxNo> GetBatchMaxNoByCode(Nullable<int> fillingLineID, Nullable<int> commodityID, string code)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BatchMaxNo>("GetBatchMaxNoByCode", fillingLineIDParameter, commodityIDParameter, codeParameter);
        }
    
        public virtual ObjectResult<BatchMaxNo> GetBatchMaxNoByEntryMonthID(Nullable<int> fillingLineID, Nullable<int> commodityID, Nullable<int> entryMonthID)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            var entryMonthIDParameter = entryMonthID.HasValue ?
                new ObjectParameter("EntryMonthID", entryMonthID) :
                new ObjectParameter("EntryMonthID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BatchMaxNo>("GetBatchMaxNoByEntryMonthID", fillingLineIDParameter, commodityIDParameter, entryMonthIDParameter);
        }
    
        public virtual ObjectResult<CartonAttribute> GetCartonAttributes(Nullable<int> fillingLineID, string submitStatusIDs, Nullable<int> palletID)
        {
            var fillingLineIDParameter = fillingLineID.HasValue ?
                new ObjectParameter("FillingLineID", fillingLineID) :
                new ObjectParameter("FillingLineID", typeof(int));
    
            var submitStatusIDsParameter = submitStatusIDs != null ?
                new ObjectParameter("SubmitStatusIDs", submitStatusIDs) :
                new ObjectParameter("SubmitStatusIDs", typeof(string));
    
            var palletIDParameter = palletID.HasValue ?
                new ObjectParameter("PalletID", palletID) :
                new ObjectParameter("PalletID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CartonAttribute>("GetCartonAttributes", fillingLineIDParameter, submitStatusIDsParameter, palletIDParameter);
        }
    
        public virtual int CartonUpdateSubmitStatus(string cartonIDs, Nullable<int> submitStatusID, string remarks)
        {
            var cartonIDsParameter = cartonIDs != null ?
                new ObjectParameter("CartonIDs", cartonIDs) :
                new ObjectParameter("CartonIDs", typeof(string));
    
            var submitStatusIDParameter = submitStatusID.HasValue ?
                new ObjectParameter("SubmitStatusID", submitStatusID) :
                new ObjectParameter("SubmitStatusID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CartonUpdateSubmitStatus", cartonIDsParameter, submitStatusIDParameter, remarksParameter);
        }
    
        public virtual ObjectResult<Webapi> GetWebapis(Nullable<int> webapiID)
        {
            var webapiIDParameter = webapiID.HasValue ?
                new ObjectParameter("WebapiID", webapiID) :
                new ObjectParameter("WebapiID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Webapi>("GetWebapis", webapiIDParameter);
        }
    
        public virtual ObjectResult<Webapi> GetWebapis(Nullable<int> webapiID, MergeOption mergeOption)
        {
            var webapiIDParameter = webapiID.HasValue ?
                new ObjectParameter("WebapiID", webapiID) :
                new ObjectParameter("WebapiID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Webapi>("GetWebapis", mergeOption, webapiIDParameter);
        }
    
        public virtual int UpdateWebapi(Nullable<int> webapiID, string baseUri, string consumerKey, string consumerSecret)
        {
            var webapiIDParameter = webapiID.HasValue ?
                new ObjectParameter("WebapiID", webapiID) :
                new ObjectParameter("WebapiID", typeof(int));
    
            var baseUriParameter = baseUri != null ?
                new ObjectParameter("BaseUri", baseUri) :
                new ObjectParameter("BaseUri", typeof(string));
    
            var consumerKeyParameter = consumerKey != null ?
                new ObjectParameter("ConsumerKey", consumerKey) :
                new ObjectParameter("ConsumerKey", typeof(string));
    
            var consumerSecretParameter = consumerSecret != null ?
                new ObjectParameter("ConsumerSecret", consumerSecret) :
                new ObjectParameter("ConsumerSecret", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWebapi", webapiIDParameter, baseUriParameter, consumerKeyParameter, consumerSecretParameter);
        }
    
        public virtual ObjectResult<BatchSumup> GetBatchSumups(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string entryStatusIDs)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var entryStatusIDsParameter = entryStatusIDs != null ?
                new ObjectParameter("EntryStatusIDs", entryStatusIDs) :
                new ObjectParameter("EntryStatusIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BatchSumup>("GetBatchSumups", fromDateParameter, toDateParameter, entryStatusIDsParameter);
        }
    
        public virtual int BatchExtraUpdate(Nullable<int> batchID, string sentPackNo, string sentCartonNo, string sentPalletNo)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var sentPackNoParameter = sentPackNo != null ?
                new ObjectParameter("SentPackNo", sentPackNo) :
                new ObjectParameter("SentPackNo", typeof(string));
    
            var sentCartonNoParameter = sentCartonNo != null ?
                new ObjectParameter("SentCartonNo", sentCartonNo) :
                new ObjectParameter("SentCartonNo", typeof(string));
    
            var sentPalletNoParameter = sentPalletNo != null ?
                new ObjectParameter("SentPalletNo", sentPalletNo) :
                new ObjectParameter("SentPalletNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BatchExtraUpdate", batchIDParameter, sentPackNoParameter, sentCartonNoParameter, sentPalletNoParameter);
        }
    }
}
